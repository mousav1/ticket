// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: terminals.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTerminal = `-- name: CreateTerminal :one

INSERT INTO terminals (city_id, name)
VALUES ($1, $2)
RETURNING id, city_id, name
`

type CreateTerminalParams struct {
	CityID pgtype.Int4 `json:"city_id"`
	Name   string      `json:"name"`
}

// terminals.sql
func (q *Queries) CreateTerminal(ctx context.Context, arg CreateTerminalParams) (Terminal, error) {
	row := q.db.QueryRow(ctx, createTerminal, arg.CityID, arg.Name)
	var i Terminal
	err := row.Scan(&i.ID, &i.CityID, &i.Name)
	return i, err
}

const getTerminalByID = `-- name: GetTerminalByID :one
SELECT id, city_id, name
FROM terminals
WHERE id = $1
`

func (q *Queries) GetTerminalByID(ctx context.Context, id int32) (Terminal, error) {
	row := q.db.QueryRow(ctx, getTerminalByID, id)
	var i Terminal
	err := row.Scan(&i.ID, &i.CityID, &i.Name)
	return i, err
}

const getTerminalsByCity = `-- name: GetTerminalsByCity :many
SELECT id, city_id, name
FROM terminals
WHERE city_id = $1
`

func (q *Queries) GetTerminalsByCity(ctx context.Context, cityID pgtype.Int4) ([]Terminal, error) {
	rows, err := q.db.Query(ctx, getTerminalsByCity, cityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Terminal{}
	for rows.Next() {
		var i Terminal
		if err := rows.Scan(&i.ID, &i.CityID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
