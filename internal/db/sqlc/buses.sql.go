// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: buses.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBus = `-- name: CreateBus :one

INSERT INTO buses (route_id, departure_time, arrival_time, capacity, price, bus_type, corporation, super_corporation, service_number, is_vip)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, route_id, departure_time, arrival_time, capacity, price, bus_type, corporation, super_corporation, service_number, is_vip
`

type CreateBusParams struct {
	RouteID          int32       `json:"route_id"`
	DepartureTime    time.Time   `json:"departure_time"`
	ArrivalTime      time.Time   `json:"arrival_time"`
	Capacity         int32       `json:"capacity"`
	Price            int32       `json:"price"`
	BusType          string      `json:"bus_type"`
	Corporation      pgtype.Text `json:"corporation"`
	SuperCorporation pgtype.Text `json:"super_corporation"`
	ServiceNumber    pgtype.Text `json:"service_number"`
	IsVip            pgtype.Bool `json:"is_vip"`
}

// buses.sql
func (q *Queries) CreateBus(ctx context.Context, arg CreateBusParams) (Bus, error) {
	row := q.db.QueryRow(ctx, createBus,
		arg.RouteID,
		arg.DepartureTime,
		arg.ArrivalTime,
		arg.Capacity,
		arg.Price,
		arg.BusType,
		arg.Corporation,
		arg.SuperCorporation,
		arg.ServiceNumber,
		arg.IsVip,
	)
	var i Bus
	err := row.Scan(
		&i.ID,
		&i.RouteID,
		&i.DepartureTime,
		&i.ArrivalTime,
		&i.Capacity,
		&i.Price,
		&i.BusType,
		&i.Corporation,
		&i.SuperCorporation,
		&i.ServiceNumber,
		&i.IsVip,
	)
	return i, err
}

const createBusSeat = `-- name: CreateBusSeat :one
INSERT INTO bus_seats (bus_id, seat_number, status, passenger_national_code)
VALUES ($1, $2, $3, $4)
RETURNING id, bus_id, seat_number, status, passenger_national_code
`

type CreateBusSeatParams struct {
	BusID                 int32       `json:"bus_id"`
	SeatNumber            int32       `json:"seat_number"`
	Status                int32       `json:"status"`
	PassengerNationalCode pgtype.Text `json:"passenger_national_code"`
}

func (q *Queries) CreateBusSeat(ctx context.Context, arg CreateBusSeatParams) (BusSeat, error) {
	row := q.db.QueryRow(ctx, createBusSeat,
		arg.BusID,
		arg.SeatNumber,
		arg.Status,
		arg.PassengerNationalCode,
	)
	var i BusSeat
	err := row.Scan(
		&i.ID,
		&i.BusID,
		&i.SeatNumber,
		&i.Status,
		&i.PassengerNationalCode,
	)
	return i, err
}

const getBusByID = `-- name: GetBusByID :one
SELECT id, route_id, departure_time, arrival_time, capacity, price, bus_type, corporation, super_corporation, service_number, is_vip
FROM buses
WHERE id = $1
`

func (q *Queries) GetBusByID(ctx context.Context, id int32) (Bus, error) {
	row := q.db.QueryRow(ctx, getBusByID, id)
	var i Bus
	err := row.Scan(
		&i.ID,
		&i.RouteID,
		&i.DepartureTime,
		&i.ArrivalTime,
		&i.Capacity,
		&i.Price,
		&i.BusType,
		&i.Corporation,
		&i.SuperCorporation,
		&i.ServiceNumber,
		&i.IsVip,
	)
	return i, err
}

const getBusSeats = `-- name: GetBusSeats :many
SELECT id, bus_id, seat_number, status, passenger_national_code
FROM bus_seats
WHERE bus_id = $1
`

func (q *Queries) GetBusSeats(ctx context.Context, busID int32) ([]BusSeat, error) {
	rows, err := q.db.Query(ctx, getBusSeats, busID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BusSeat{}
	for rows.Next() {
		var i BusSeat
		if err := rows.Scan(
			&i.ID,
			&i.BusID,
			&i.SeatNumber,
			&i.Status,
			&i.PassengerNationalCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchBuses = `-- name: SearchBuses :many
SELECT b.id, b.route_id, b.departure_time, b.arrival_time, b.capacity, b.price, b.bus_type, b.corporation, b.super_corporation, b.service_number, b.is_vip
FROM buses b
JOIN routes r ON b.route_id = r.id
WHERE r.origin_terminal_id = $1 AND r.destination_terminal_id = $2 AND b.departure_time >= $3
`

type SearchBusesParams struct {
	OriginTerminalID      int32     `json:"origin_terminal_id"`
	DestinationTerminalID int32     `json:"destination_terminal_id"`
	DepartureTime         time.Time `json:"departure_time"`
}

func (q *Queries) SearchBuses(ctx context.Context, arg SearchBusesParams) ([]Bus, error) {
	rows, err := q.db.Query(ctx, searchBuses, arg.OriginTerminalID, arg.DestinationTerminalID, arg.DepartureTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Bus{}
	for rows.Next() {
		var i Bus
		if err := rows.Scan(
			&i.ID,
			&i.RouteID,
			&i.DepartureTime,
			&i.ArrivalTime,
			&i.Capacity,
			&i.Price,
			&i.BusType,
			&i.Corporation,
			&i.SuperCorporation,
			&i.ServiceNumber,
			&i.IsVip,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchBusesByCities = `-- name: SearchBusesByCities :many
SELECT b.id, b.route_id, b.departure_time, b.arrival_time, b.capacity, b.price, b.bus_type, b.corporation, b.super_corporation, b.service_number, b.is_vip
FROM buses b
JOIN routes r ON b.route_id = r.id
JOIN terminals t_origin ON r.origin_terminal_id = t_origin.id
JOIN terminals t_destination ON r.destination_terminal_id = t_destination.id
WHERE t_origin.city_id = $1 AND t_destination.city_id = $2 AND b.departure_time >= $3
`

type SearchBusesByCitiesParams struct {
	CityID        int32     `json:"city_id"`
	CityID_2      int32     `json:"city_id_2"`
	DepartureTime time.Time `json:"departure_time"`
}

func (q *Queries) SearchBusesByCities(ctx context.Context, arg SearchBusesByCitiesParams) ([]Bus, error) {
	rows, err := q.db.Query(ctx, searchBusesByCities, arg.CityID, arg.CityID_2, arg.DepartureTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Bus{}
	for rows.Next() {
		var i Bus
		if err := rows.Scan(
			&i.ID,
			&i.RouteID,
			&i.DepartureTime,
			&i.ArrivalTime,
			&i.Capacity,
			&i.Price,
			&i.BusType,
			&i.Corporation,
			&i.SuperCorporation,
			&i.ServiceNumber,
			&i.IsVip,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
