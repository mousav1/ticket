// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cities.sql

package db

import (
	"context"
)

const createCity = `-- name: CreateCity :one
INSERT INTO cities (name)
VALUES ($1)
RETURNING id, name
`

func (q *Queries) CreateCity(ctx context.Context, name string) (City, error) {
	row := q.db.QueryRow(ctx, createCity, name)
	var i City
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getAllCities = `-- name: GetAllCities :many
SELECT id, name
FROM cities
`

func (q *Queries) GetAllCities(ctx context.Context) ([]City, error) {
	rows, err := q.db.Query(ctx, getAllCities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []City{}
	for rows.Next() {
		var i City
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCityByID = `-- name: GetCityByID :one

SELECT id, name
FROM cities
WHERE id = $1
`

// cities.sql
func (q *Queries) GetCityByID(ctx context.Context, id int32) (City, error) {
	row := q.db.QueryRow(ctx, getCityByID, id)
	var i City
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
