// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: routes.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRoute = `-- name: CreateRoute :one

INSERT INTO routes (origin_terminal_id, destination_terminal_id, duration, distance)
VALUES ($1, $2, $3, $4)
RETURNING id, origin_terminal_id, destination_terminal_id, duration, distance
`

type CreateRouteParams struct {
	OriginTerminalID      pgtype.Int4     `json:"origin_terminal_id"`
	DestinationTerminalID pgtype.Int4     `json:"destination_terminal_id"`
	Duration              pgtype.Interval `json:"duration"`
	Distance              int32           `json:"distance"`
}

// routes.sql
func (q *Queries) CreateRoute(ctx context.Context, arg CreateRouteParams) (Route, error) {
	row := q.db.QueryRow(ctx, createRoute,
		arg.OriginTerminalID,
		arg.DestinationTerminalID,
		arg.Duration,
		arg.Distance,
	)
	var i Route
	err := row.Scan(
		&i.ID,
		&i.OriginTerminalID,
		&i.DestinationTerminalID,
		&i.Duration,
		&i.Distance,
	)
	return i, err
}

const getAllRoutes = `-- name: GetAllRoutes :many
SELECT id, origin_terminal_id, destination_terminal_id, duration, distance
FROM routes
`

// پیدا کردن تمامی مسیرها
func (q *Queries) GetAllRoutes(ctx context.Context) ([]Route, error) {
	rows, err := q.db.Query(ctx, getAllRoutes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Route{}
	for rows.Next() {
		var i Route
		if err := rows.Scan(
			&i.ID,
			&i.OriginTerminalID,
			&i.DestinationTerminalID,
			&i.Duration,
			&i.Distance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRouteByTerminals = `-- name: GetRouteByTerminals :one
SELECT id, origin_terminal_id, destination_terminal_id, duration, distance
FROM routes
WHERE origin_terminal_id = $1 AND destination_terminal_id = $2
`

type GetRouteByTerminalsParams struct {
	OriginTerminalID      pgtype.Int4 `json:"origin_terminal_id"`
	DestinationTerminalID pgtype.Int4 `json:"destination_terminal_id"`
}

// پیدا کردن یک مسیر بر اساس مبدا و مقصد
func (q *Queries) GetRouteByTerminals(ctx context.Context, arg GetRouteByTerminalsParams) (Route, error) {
	row := q.db.QueryRow(ctx, getRouteByTerminals, arg.OriginTerminalID, arg.DestinationTerminalID)
	var i Route
	err := row.Scan(
		&i.ID,
		&i.OriginTerminalID,
		&i.DestinationTerminalID,
		&i.Duration,
		&i.Distance,
	)
	return i, err
}
